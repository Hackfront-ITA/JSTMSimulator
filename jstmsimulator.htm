<!doctype html>
<!--
JSTMSimulator - A Turing Machine simulator written in JavaScript.
Copyright (C) 2013 VittGam.net. All Rights Reserved.
https://server1.vittgam.net/jstmsimulator/
https://github.com/VittGam/JSTMSimulator

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<title>JSTMSimulator by VittGam</title>
<style>
html, body {
	margin: 0;
	padding: 0;
	overflow: auto;
}
body {
	font: 15px arial,sans-serif;
	background: #008b54;
}
#main, #tape #tapebg {
	background-image: url(jstmsimulator.gif);
	background-repeat: no-repeat;
}
#main {
	position: relative;
	background-position: -720px 0px;
	width: 950px;
	height: 574px;
	margin: 8px auto;
	overflow: hidden;
	font-size: 16px;
	font-family: "monospace",monospace;
	cursor: default;
	-moz-user-select: -moz-none;
	-khtml-user-select: none;
	-webkit-user-select: none;
	-o-user-select: none;
	-ms-user-select: none;
	user-select: none;
}
#state {
	position: absolute;
	left: 0;
	top: 186px;
	width: 684px;
	height: 32px;
	margin: 0 auto;
	text-align: center;
	font-size: 32px;
	font-weight: bold;
	white-space: nowrap;
	z-index: 1;
}
#code {
	position: absolute;
	z-index: 4;
	left: 720px;
	top: 0;
	font-size: 13px;
	line-height: 16px;
	width: 226px;
	height: 568px; /*520px*/
	overflow: scroll;
	white-space: pre;
	word-wrap: normal;
	resize: none;
	padding: 2px;
	border: 0;
}
#status {
	position: absolute;
	z-index: 3;
	left: 0;
	top: 507px;
	width: 716px;
	height: 13px;
	text-align: right;
	color: white;
	white-space: nowrap;
	font: 13px arial,sans-serif;
	font-weight: bold;
	text-shadow: black 0 0 6px;
}
#startbtn {
	position: absolute;
	z-index: 4;
	left: 240px;
	top: 526px;
	width: 240px;
	height: 24px;
}
#stopbtn {
	position: absolute;
	z-index: 4;
	left: 480px;
	top: 526px;
	width: 240px;
	height: 24px;
}
#speedlbl {
	position: absolute;
	z-index: 4;
	left: 0;
	top: 528px;
	width: 70px;
	height: 18px;
	color: white;
	font: 18px arial,sans-serif;
}
#speed {
	position: absolute;
	z-index: 4;
	left: 70px;
	top: 526px;
	width: 170px;
	height: 24px;
}
#input {
	position: absolute;
	z-index: 4;
	left: 0;
	top: 551px;
	width: 716px;
	height: 16px;
}
#tape {
	position: absolute;
	z-index: 2;
	left: 0;
	top: 314px;
	width: 720px;
	height: 209px;
	overflow: hidden;
}
#tape #tapebg {
	background-position: 0px 0px;
	position: absolute;
	z-index: 1;
	left: 0;
	top: 0;
	width: 720px;
	height: 627px;
}
#tape.anim1 #tapebg {
	top: -418px;
}
#tape.anim2 #tapebg {
	top: -209px;
}
#tape span {
	position: absolute;
	font-weight: bold;
	width: 10px;
	height: 16px;
	z-index: 2;
}
#tape.anim1 span {
	margin-left: 1px;
}
#tape.anim2 span {
	margin-left: -6px;
	margin-top: -1px;
}
#tape.movedleft span#cell16,
#tape.movedright span#cell14 {
	color: green;
}
#tape span#cell0{left:156px;top:35px}
#tape span#cell1{left:167px;top:36px}
#tape span#cell2{left:181px;top:35px}
#tape span#cell3{left:194px;top:35px}
#tape span#cell4{left:208px;top:35px}
#tape span#cell5{left:220px;top:35px}
#tape span#cell6{left:232px;top:34px}
#tape span#cell7{left:245px;top:34px}
#tape span#cell8{left:259px;top:34px}
#tape span#cell9{left:273px;top:34px}
#tape span#cell10{left:288px;top:33px}
#tape span#cell11{left:303px;top:32px}
#tape span#cell12{left:318px;top:32px}
#tape span#cell13{left:333px;top:32px}
#tape span#cell14{left:347px;top:31px}
#tape span#cell15{left:362px;top:31px;color:red}
#tape span#cell16{left:376px;top:30px}
#tape span#cell17{left:390px;top:30px}
#tape span#cell18{left:404px;top:29px}
#tape span#cell19{left:418px;top:29px}
#tape span#cell20{left:433px;top:29px}
#tape span#cell21{left:449px;top:29px}
#tape span#cell22{left:465px;top:29px}
#tape span#cell23{left:479px;top:28px}
#tape span#cell24{left:493px;top:28px}
#tape span#cell25{left:507px;top:28px}
#tape span#cell26{left:519px;top:27px}
#tape span#cell27{left:532px;top:27px}
#tape span#cell28{left:546px;top:26px}
#tape span#cell29{left:560px;top:27px}
#tape span#cell30{left:576px;top:28px}
#moveleft {
	position: absolute;
	left: 78px;
	top: 326px;
	width: 64px;
	height: 64px;
	z-index: 4;
}
#moveright {
	position: absolute;
	left: 587px;
	top: 329px;
	width: 64px;
	height: 64px;
	z-index: 4;
}
#noscript-alert {
	color: red;
	font-size: 40px;
	font-weight: bold;
	text-align: center;
	margin: 20px auto;
	padding: 20px;
	width: 910px;
	border: 4px dashed red;
	border-radius: 20px;
}
/* The fork-me-on-github CSS badge code has been adapted from https://github.com/simonwhitaker/github-fork-ribbon-css */
#fork-me-on-github {
	width: 150px;
	height: 150px;
	position: absolute;
	overflow: hidden;
	top: 0;
	right: 0;
	-moz-user-select: -moz-none;
	-khtml-user-select: none;
	-webkit-user-select: none;
	-o-user-select: none;
	-ms-user-select: none;
	user-select: none;
	z-index: 0;
}
#fork-me-on-github div {
	position: absolute;
	padding: 2px 0;
	background-color: #a00;
	background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.00)), to(rgba(0, 0, 0, 0.15)));
	background-image: -webkit-linear-gradient(top, rgba(0, 0, 0, 0.00), rgba(0, 0, 0, 0.15));
	background-image: -moz-linear-gradient(top, rgba(0, 0, 0, 0.00), rgba(0, 0, 0, 0.15));
	background-image: -o-linear-gradient(top, rgba(0, 0, 0, 0.00), rgba(0, 0, 0, 0.15));
	background-image: -ms-linear-gradient(top, rgba(0, 0, 0, 0.00), rgba(0, 0, 0, 0.15));
	background-image: linear-gradient(top, rgba(0, 0, 0, 0.00), rgba(0, 0, 0, 0.15));
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#000000', EndColorStr='#000000');
	-webkit-box-shadow: 0px 2px 3px 0px rgba(0, 0, 0, 0.5);
	box-shadow: 0px 2px 3px 0px rgba(0, 0, 0, 0.5);
	z-index: 9999;
	top: 42px;
	right: -43px;
	-webkit-transform: rotate(45deg);
	-moz-transform: rotate(45deg);
	-o-transform: rotate(45deg);
	-ms-transform: rotate(45deg);
	transform: rotate(45deg);
}
#fork-me-on-github div a {
	font-family: arial,sans-serif;
	font-size: 13px;
	font-weight: 700;
	color: white;
	text-decoration: none;
	text-shadow: 0 -1px rgba(0,0,0,0.5);
	text-align: center;
	width: 200px;
	line-height: 20px;
	display: inline-block;
	padding: 2px 0;
	border-width: 1px 0;
	border-style: dotted;
	border-color: rgba(255,255,255,0.7);
}
</style>
<!--[if lt IE 9]>
<style>
#fork-me-on-github div {
	top: -22px;
	right: -62px;
	-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=0.7071067811865474, M12=-0.7071067811865477, M21=0.7071067811865477, M22=0.7071067811865474, SizingMethod='auto expand')";
	filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.7071067811865474, M12=-0.7071067811865477, M21=0.7071067811865477, M22=0.7071067811865474, SizingMethod='auto expand');
}
</style>
<![endif]-->
<!--[if lt IE 7]>
<style>
#fork-me-on-github div {
	right: -22px;
}
</style>
<![endif]-->
</head>
<body>
<div id="fork-me-on-github"><div><a href="https://github.com/VittGam/JSTMSimulator">Fork me on GitHub</a></div></div>
<noscript><div id="noscript-alert">Please enable JavaScript in your browser.</div></noscript>
<div id="main">
<div id="state">0</div>
<textarea id="code" wrap="off" autocomplete="off" disabled></textarea>
<input type="button" id="startbtn" value="" disabled>
<input type="button" id="stopbtn" value="" disabled>
<span id="speedlbl"></span>
<select id="speed" autocomplete="off" disabled>
<option>0</option>
<option>1</option>
<option>2</option>
<option>3</option>
<option>4</option>
<option selected>5</option>
<option>6</option>
<option>7</option>
<option>8</option>
<option>9</option>
<option>10</option>
<option>Max (async)</option>
</select>
<input type="text" id="input" autocomplete="off" value="" disabled>
<div id="status">JSTMSimulator by VittGam</div>
<div id="tape">
<div id="tapebg"></div>
<span id="cell0"></span>
<span id="cell1"></span>
<span id="cell2"></span>
<span id="cell3"></span>
<span id="cell4"></span>
<span id="cell5"></span>
<span id="cell6"></span>
<span id="cell7"></span>
<span id="cell8"></span>
<span id="cell9"></span>
<span id="cell10"></span>
<span id="cell11"></span>
<span id="cell12"></span>
<span id="cell13"></span>
<span id="cell14"></span>
<span id="cell15"></span>
<span id="cell16"></span>
<span id="cell17"></span>
<span id="cell18"></span>
<span id="cell19"></span>
<span id="cell20"></span>
<span id="cell21"></span>
<span id="cell22"></span>
<span id="cell23"></span>
<span id="cell24"></span>
<span id="cell25"></span>
<span id="cell26"></span>
<span id="cell27"></span>
<span id="cell28"></span>
<span id="cell29"></span>
<span id="cell30"></span>
</div>
<div id="moveleft"></div>
<div id="moveright"></div>
</div>
<script>
(function(){
	var lang = {};
	lang.en = {
		START_BUTTON: 'Start',
		STOP_BUTTON: 'Stop',
		SPEED_LABEL: 'Speed:',
		STEPS_LABEL: 'Steps:',
		STOPPED: 'End of computation.',
		UNKNOWN_ERROR_LABEL: 'Error:',
		SYNTAX_ERROR_LABEL: 'Syntax error at line %d:',
		READ_ERROR: 'A read error occurred',
		READ_ERROR_EXPECTED_COMMA: 'A "," was expected as separator',
		READ_ERROR_EMPTY_SOURCE_STATUS: 'A read error occurred while reading the source status',
		READ_ERROR_EMPTY_SOURCE_SYMBOL: 'A read error occurred while reading the source symbol',
		READ_ERROR_EMPTY_DESTINATION_STATUS: 'A read error occurred while reading the destination status',
		READ_ERROR_EMPTY_DESTINATION_SYMBOL: 'A read error occurred while reading the destination symbol',
		READ_ERROR_EMPTY_MOVEMENT: 'A read error occurred while reading the movement',
		READ_ERROR_WRONG_MOVEMENT: 'The movement is not correct',
		READ_ERROR_EMPTY_CHARACTER_CLASS: 'One of the character classes in the rule is empty',
		READ_ERROR_WRONG_CHARACTER_CLASS: 'The character classes in the rule are of different length',
		READ_ERROR_UNEXPECTED_END_OF_RULE: 'Unexpected end of rule',
		WARNING_ASCENDING_CHARACTER_CLASS: 'Warning: implicit ascending character classes (eg. "z..a") are not supported by the official simulator!\nWe suggest you to expand implicit ascending classes, for example "9..0" should become "9876543210".',
		WARNING_WONT_BE_SHOWN_AGAIN: 'This warning will not be shown again for this session.',
		EXIT_CONFIRMATION: 'Are you sure you want to exit?'
	};
	lang.it = {
		START_BUTTON: 'Esegui',
		STOP_BUTTON: 'Stop',
		SPEED_LABEL: 'Velocità:',
		STEPS_LABEL: 'Passi:',
		STOPPED: 'Fine della computazione.',
		UNKNOWN_ERROR_LABEL: 'Errore:',
		SYNTAX_ERROR_LABEL: 'Errore di sintassi (linea %d):',
		READ_ERROR: 'Errore nella lettura',
		READ_ERROR_EXPECTED_COMMA: 'Era attesa la "," come separatore',
		READ_ERROR_EMPTY_SOURCE_STATUS: 'Errore nella lettura dello stato di partenza',
		READ_ERROR_EMPTY_SOURCE_SYMBOL: 'Errore nella lettura del simbolo da leggere',
		READ_ERROR_EMPTY_DESTINATION_STATUS: 'Errore nella lettura dello stato di destinazione',
		READ_ERROR_EMPTY_DESTINATION_SYMBOL: 'Errore nella lettura del simbolo da scrivere',
		READ_ERROR_EMPTY_MOVEMENT: 'Errore nella lettura del movimento da eseguire',
		READ_ERROR_WRONG_MOVEMENT: 'Lo spostamento non è corretto',
		READ_ERROR_EMPTY_CHARACTER_CLASS: 'Una delle classi di caratteri nella regola è vuota',
		READ_ERROR_WRONG_CHARACTER_CLASS: 'Le classi di caratteri nella regola hanno lunghezze differenti',
		READ_ERROR_UNEXPECTED_END_OF_RULE: 'Fine inattesa della regola',
		WARNING_ASCENDING_CHARACTER_CLASS: 'Attenzione: ricorda che le classi di caratteri ascendenti implicite (ad es. "z..a") non sono supportate dal simulatore ufficiale!\nTi suggeriamo di espandere le classi ascendenti implicite, ad esempio "9..0" dovrebbe diventare "9876543210".',
		WARNING_WONT_BE_SHOWN_AGAIN: 'Questo avviso non verrà mostrato di nuovo per questa sessione.',
		EXIT_CONFIRMATION: 'Sei sicuro di voler uscire?'
	};
	var currlang = lang.en;
	try {
		var browserLang = (window.navigator && (navigator.language || navigator.userLanguage || navigator.browserLanguage));
		if (browserLang && lang[String(browserLang).substr(0, 2)]) {
			currlang = lang[String(browserLang).substr(0, 2)];
		}
		browserLang = null;
	} catch (e) {}

	var alphabet = '!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^-{|}';
	var input = '';
	var rules = {};
	var stepcount = 0;
	var lastmove = '-';
	var tapetext = '';
	var tapepos = 0;
	var currstate = '0';
	var currtickline = 0;
	var currclass = null;
	var ascending_character_class_warning = false;
	var statusTimeout = null;
	var drawTimeout = null;
	var tickTimeout = null;
	var stopped = true;
	var tickSpeed = 750;
	var drawSpeed = 150;
	var speedToTimeoutMapping = [1500, 1350, 1200, 1050, 900, 750, 600, 450, 300, 150, 0, 0];

	var statusDiv = document.getElementById('status');
	var stateDiv = document.getElementById('state');
	var codeTextarea = document.getElementById('code');
	var inputBox = document.getElementById('input');
	var tapeDiv = document.getElementById('tape');
	var speedLabel = document.getElementById('speedlbl');
	var speedSelect = document.getElementById('speed');
	var startBtn = document.getElementById('startbtn');
	var stopBtn = document.getElementById('stopbtn');
	var moveLeftBtn = document.getElementById('moveleft');
	var moveRightBtn = document.getElementById('moveright');
	var cells = [];
	for (var i = 0; i < 31; i++) {
		cells[i] = document.getElementById('cell' + i);
	}

	var textContentProp = ('textContent' in document.body ? 'textContent' : 'innerText');
	var setTextContent = function(div, text){
		if (div) {
			div[textContentProp] = text;
		}
	};

	startBtn.value = currlang.START_BUTTON;
	stopBtn.value = currlang.STOP_BUTTON;
	setTextContent(speedLabel, currlang.SPEED_LABEL);

	var setstatus = function(text, dontcancel){
		clearTimeout(statusTimeout);
		setTextContent(statusDiv, text || '');
		if (!dontcancel && text !== '') {
			statusTimeout = setTimeout(function(){
				setTextContent(statusDiv, '');
			}, 5000);
		}
	};
	var TMError = function(msg){
		if (!(this instanceof TMError)) {
			return new TMError(msg);
		}
		if (msg) {
			this.message = msg;
		}
	};
	TMError.prototype = new Error();
	TMError.prototype.name = 'TMError';
	TMError.toString = function(){
		return 'function TMError() { [native code] }';
	};
	TMError.toString.toString = TMError.toString;
	var addEvent = function(elm, evt, func){
		if (elm.addEventListener) {
			elm.addEventListener(evt, func, false);
		} else if (elm.attachEvent) {
			elm.attachEvent('on' + (evt === 'change' ? 'propertychange' : evt), func);
		}
	};
	var inArray = function(currarray, elm){
		if (currarray) {
			for (var i = 0; i < currarray.length; i++) {
				if (i in currarray && currarray[i] === elm) {
					return i;
				}
			}
		}
		return -1;
	};
	var textareaSelectLine = function(currtextarea, linenumber){
		try {
			if (linenumber < 0) {
				return;
			}
			var startpos = 0;
			var endpos = 0;
			var currtextareavalue = currtextarea.value.replace(/\r\n/g, '\n');
			var currtextareavaluelen = currtextareavalue.length;
			for (var i = linenumber; i > 0; i--) {
				startpos = currtextareavalue.indexOf('\n', startpos) + 1;
				if (startpos === 0) {
					return;
				}
			}
			endpos = currtextareavalue.indexOf('\n', startpos);
			if (typeof startpos !== 'number' || startpos < 0 || startpos > currtextareavaluelen) {
				startpos = 0;
			}
			if (typeof endpos !== 'number' || endpos < 0 || endpos > currtextareavaluelen) {
				endpos = currtextareavaluelen;
			}
			if (endpos <= startpos) {
				return;
			}
			var textarealineheight = null;
			if ((window.getComputedStyle && (textarealineheight = window.getComputedStyle(currtextarea, null))) || (document.defaultView && document.defaultView.getComputedStyle && (textarealineheight = document.defaultView.getComputedStyle(currtextarea, null)))) {
				textarealineheight = parseInt(textarealineheight.getPropertyValue('line-height'), 10);
			}
			if (!textarealineheight) {
				textarealineheight = parseInt((currtextarea.currentStyle || currtextarea.style || {}).lineHeight || 16, 10);
			}
			currtextarea.scrollTop = Math.max(0, linenumber * textarealineheight - (currtextarea.clientHeight - textarealineheight) / 2);
			textarealineheight = null;
			if (startpos === 0 && endpos === currtextareavaluelen && typeof currtextarea.select === 'function') {
				currtextarea.select();
			} else if (currtextarea.setSelectionRange) {
				currtextarea.setSelectionRange(startpos, endpos);
			} else if (currtextarea.createTextRange) {
				var range = currtextarea.createTextRange();
				range.collapse(true);
				range.moveEnd('character', endpos);
				range.moveStart('character', startpos);
				range.select();
				range = null;
			}
		} catch (e) {}
	};
	var drawtape = function(){
		var redraw = false;
		if (currclass === 0) {
			currclass = (lastmove === '-' ? 3 : 1);
		} else if (currclass === 1) {
			currclass = 2;
			redraw = true;
		} else if (currclass === 2) {
			currclass = 0;
		} else if (currclass === 3) {
			currclass = 4;
			redraw = true;
		} else if (currclass === 4) {
			currclass = 0;
		} else {
			currclass = 0;
			redraw = true;
		}
		if (redraw) {
			for (var i = 0; i < 31; i++) {
				setTextContent(cells[i], tapetext.charAt(i + tapepos - 15));
			}
			if (startBtn.disabled) {
				textareaSelectLine(codeTextarea, currtickline);
			}
			setTextContent(stateDiv, currstate);
			setstatus(currlang.STEPS_LABEL + ' ' + stepcount, true);
		}
		var newClassName = [];
		if (currclass === 1 || currclass === 2) {
			newClassName.push('anim' + currclass);
		}
		if (currclass === 2) {
			if (lastmove === '<') {
				newClassName.push('movedleft');
			} else if (lastmove === '>') {
				newClassName.push('movedright');
			}
		}
		newClassName = newClassName.join(' ');
		if (tapeDiv.className !== newClassName) {
			tapeDiv.className = newClassName;
		}
		newClassName = null;
		if (currclass === 0 && stopped) {
			input = '';
			rules = {};
			lastmove = '-';
			currclass = null;
			setstatus(currlang.STOPPED + ' ' + currlang.STEPS_LABEL + ' ' + stepcount, true);
			codeTextarea.readOnly = inputBox.disabled = startBtn.disabled = false;
			return;
		}
		drawTimeout = setTimeout(drawtape, drawSpeed);
	};
	var tick = function(){
		if (stopped) {
			return;
		}
		while (tapepos < 0) {
			tapetext = ' ' + tapetext;
			tapepos++;
		}
		while (tapepos >= tapetext.length) {
			tapetext = tapetext + ' ';
		}
		var currchar = tapetext.charAt(tapepos);
		if (!(rules[currstate] && rules[currstate][currchar])) {
			stop();
			currclass = null;
			drawtape();
			return;
		}
		tapetext = tapetext.substring(0, tapepos) + rules[currstate][currchar][1] + tapetext.substring(tapepos + 1);
		if (rules[currstate][currchar][2] === '<') {
			lastmove = '<';
			tapepos--;
		} else if (rules[currstate][currchar][2] === '>') {
			lastmove = '>';
			tapepos++;
		} else {
			lastmove = '-';
		}
		stepcount++;
		currtickline = rules[currstate][currchar][3];
		currstate = rules[currstate][currchar][0];
		tickTimeout = setTimeout(tick, tickSpeed);
	};
	var unescapedIndexOf = function(input, srch, startidx){
		var output = (typeof startidx == 'undefined' ? 0 : startidx) - 1;
		do {
			output = input.indexOf(srch, output + 1);
		} while (input.charAt(output - 1) === '\\' && input.charAt(output - 2) !== '\\');
		return output;
	};
	var getpart = function(grplength, currtype){
		var openpIdx = unescapedIndexOf(input, '(');
		var commaIdx;
		var closeIdx;
		if (currtype === 4) { // parsing movement, it's the last part of the 5-uple
			commaIdx = unescapedIndexOf(input, ')');
			closeIdx = -1;
		} else {
			commaIdx = unescapedIndexOf(input, ',');
			closeIdx = unescapedIndexOf(input, ')');
		}
		var nlineIdx = input.indexOf('\n');
		if (openpIdx !== -1 && openpIdx < commaIdx) {
			throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
		} else if (closeIdx !== -1 && closeIdx < commaIdx) {
			throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
		} else if (nlineIdx !== -1 && nlineIdx < commaIdx) {
			throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
		}
		var part = input.substring(0, commaIdx).replace(new RegExp('^\\s\\s*'), '').replace(new RegExp('\\s\\s*$'), '');
		input = input.substring(commaIdx + 1);
		if (part === '') {
			if (currtype === 0) {
				throw new TMError(currlang.READ_ERROR_EMPTY_SOURCE_STATUS);
			} else if (currtype === 1) {
				throw new TMError(currlang.READ_ERROR_EMPTY_SOURCE_SYMBOL);
			} else if (currtype === 2) {
				throw new TMError(currlang.READ_ERROR_EMPTY_DESTINATION_STATUS);
			} else if (currtype === 3) {
				throw new TMError(currlang.READ_ERROR_EMPTY_DESTINATION_SYMBOL);
			} else if (currtype === 4) {
				throw new TMError(currlang.READ_ERROR_EMPTY_MOVEMENT);
			}
			throw new TMError(currlang.READ_ERROR); // this shouldn't ever happen...
		}
		var open1Idx = unescapedIndexOf(part, '[');
		var clos1Idx = unescapedIndexOf(part, ']');
		var open2Idx = unescapedIndexOf(part, '{');
		var clos2Idx = unescapedIndexOf(part, '}');
		var caretIdx = unescapedIndexOf(part, '^');
		if (open1Idx !== -1) {
			if (clos1Idx === -1) {
				throw new TMError(currlang.READ_ERROR_WRONG_CHARACTER_CLASS);
			}
			if (open2Idx !== -1 || clos2Idx !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if (caretIdx !== -1 && caretIdx !== open1Idx + 1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if (currtype !== 0 && currtype !== 2 && ((open1Idx !== 0) || (clos1Idx !== part.length - 1))) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if ((currtype === 0 || currtype === 2) && unescapedIndexOf(part, '[', open1Idx + 1) !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if ((currtype === 0 || currtype === 2) && unescapedIndexOf(part, ']', clos1Idx + 1) !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			return parsegroup(0, grplength, part.substring(open1Idx + 1, clos1Idx), part.substring(0, open1Idx), part.substring(clos1Idx + 1));
		} else if (open2Idx !== -1) {
			if (clos2Idx === -1) {
				throw new TMError(currlang.READ_ERROR_WRONG_CHARACTER_CLASS);
			}
			if (open1Idx !== -1 || clos1Idx !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if (caretIdx !== -1 && caretIdx !== open2Idx + 1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if (currtype !== 0 && currtype !== 2 && ((open2Idx !== 0) || (clos2Idx !== part.length - 1))) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if ((currtype === 0 || currtype === 2) && unescapedIndexOf(part, '{', open2Idx + 1) !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			if ((currtype === 0 || currtype === 2) && unescapedIndexOf(part, '}', clos2Idx + 1) !== -1) {
				throw new TMError(currlang.READ_ERROR_EXPECTED_COMMA);
			}
			return parsegroup(1, grplength, part.substring(open2Idx + 1, clos2Idx), part.substring(0, open2Idx), part.substring(clos2Idx + 1));
		}
		if (currtype !== 0 && currtype !== 2) { // not the states
			return parsegroup((part.length > 1 ? 2 : 3), grplength, part, '', '');
		}
		return part;
	};
	var checkforgroup = function(checkme, currline, readstate, readtape, writestate, writetape, movement){
		if (checkme instanceof Array) {
			for (var i = 1; i < checkme.length; i++) {
				addrule(currline, (readstate instanceof Array && readstate[0] === checkme[0] ? readstate[i] : readstate), (readtape instanceof Array && readtape[0] === checkme[0] ? readtape[i] : readtape), (writestate instanceof Array && writestate[0] === checkme[0] ? writestate[i] : writestate), (writetape instanceof Array && writetape[0] === checkme[0] ? writetape[i] : writetape), (movement instanceof Array && movement[0] === checkme[0] ? movement[i] : movement));
			}
			return true;
		}
		return false;
	};
	var addrule = function(currline, readstate, readtape, writestate, writetape, movement){
		if (checkforgroup(readstate, currline, readstate, readtape, writestate, writetape, movement)) {
			return;
		}
		if (checkforgroup(readtape, currline, readstate, readtape, writestate, writetape, movement)) {
			return;
		}
		if (checkforgroup(writestate, currline, readstate, readtape, writestate, writetape, movement)) {
			return;
		}
		if (checkforgroup(writetape, currline, readstate, readtape, writestate, writetape, movement)) {
			return;
		}
		if (checkforgroup(movement, currline, readstate, readtape, writestate, writetape, movement)) {
			return;
		}
		if (movement !== '<' && movement !== '>' && movement !== ' ') {
			throw new TMError(currlang.READ_ERROR_WRONG_MOVEMENT);
		}
		if (!rules[readstate]) {
			rules[readstate] = {};
		}
		rules[readstate][readtape] = [writestate, writetape, movement, currline];
	};
	var parsegroup = function(grpid, grplength, group, prefix, suffix){
		var outarray = [];
		var reversematch = false;
		var prefix2 = prefix;
		var suffix2 = suffix;
		if (group.charAt(0) === '^') {
			reversematch = true;
			group = group.substring(1);
			prefix = suffix = '';
			if (grpid === 3) {
				grpid = 2;
			}
		}
		while (group.length) {
			if (group.charAt(0) === '\\') {
				outarray.push(prefix + group.charAt(1) + suffix);
				group = group.substring(2);
			} else if (group.charAt(0) === '-') {
				outarray.push(prefix + ' ' + suffix);
				group = group.substring(1);
			} else if (group.substr(1, 2) === '..' && group.charAt(group.charAt(3) === '\\' ? 4 : 3) !== '') {
				var startchar = group.charAt(0);
				var stopchar = group.charAt(3);
				if (stopchar === '\\') {
					stopchar = group.charAt(4);
					group = group.substring(5);
				} else {
					group = group.substring(4);
				}
				var i = alphabet.indexOf(startchar);
				var j = alphabet.indexOf(stopchar);
				if (i <= j) {
					for (; i <= j; i++) {
						outarray.push(prefix + alphabet.charAt(i) + suffix);
					}
				} else {
					if (!ascending_character_class_warning) {
						ascending_character_class_warning = true;
						alert(currlang.WARNING_ASCENDING_CHARACTER_CLASS + '\n\n' + currlang.WARNING_WONT_BE_SHOWN_AGAIN);
					}
					for (; i >= j; i--) {
						outarray.push(prefix + alphabet.charAt(i) + suffix);
					}
				}
			} else {
				outarray.push(prefix + group.charAt(0) + suffix);
				group = group.substring(1);
			}
		}
		if (reversematch) {
			var newoutarray = [];
			for (var k = 0; k < alphabet.length; k++) {
				if (inArray(outarray, alphabet.charAt(k)) === -1) {
					newoutarray.push(prefix2 + alphabet.charAt(k) + suffix2);
				}
			}
			if (inArray(outarray, ' ') === -1) {
				newoutarray.push(prefix2 + ' ' + suffix2);
			}
			outarray = newoutarray;
		}
		if (outarray.length === 1) {
			grpid = 3;
		}
		if (outarray.length < 1) {
			throw new TMError(currlang.READ_ERROR_EMPTY_CHARACTER_CLASS);
		} else if (grplength[grpid] && grplength[grpid] !== outarray.length) {
			throw new TMError(currlang.READ_ERROR_WRONG_CHARACTER_CLASS);
		}
		grplength[grpid] = outarray.length;
		outarray.unshift(grpid);
		return outarray;
	};
	var addedBeforeUnloadEvent = false;
	var start = function(){
		codeTextarea.readOnly = inputBox.disabled = startBtn.disabled = true;
		if (!addedBeforeUnloadEvent) {
			addedBeforeUnloadEvent = true;
			window.onbeforeunload = function(){
				return currlang.EXIT_CONFIRMATION;
			};
		}
		try {
			input = String(codeTextarea.value).toUpperCase().replace(new RegExp('(?:\r\n|\r)', 'g'), '\n');
			rules = {};
			stepcount = 0;
			lastmove = '-';
			tapetext = String(inputBox.value).toUpperCase();
			tapepos = 0;
			currstate = '0';
			currtickline = 0;
			currclass = null;
			clearTimeout(drawTimeout);
			clearTimeout(tickTimeout);
			stopped = false;
			setstatus();
			var currline = 0;
			var exitloop = false;
			while (!exitloop) {
				switch (input.substr(0, 1)) {
					case '':
						exitloop = true;
						break;
					case '#':
						currline++;
						if (input.indexOf('\n') === -1) {
							input = '';
							exitloop = true;
						} else {
							input = input.substring(input.indexOf('\n') + 1);
						}
						break;
					case '\n':
						currline++;
						input = input.substring(1);
						break;
					case ' ':
						input = input.substring(1);
						break;
					case '(':
						input = input.substring(1);
						var grplength = {};
						var readstate = getpart(grplength, 0);
						var readtape = getpart(grplength, 1);
						var writestate = getpart(grplength, 2);
						var writetape = getpart(grplength, 3);
						var movement = getpart(grplength, 4);
						addrule(currline, readstate, readtape, writestate, writetape, movement);
						break;
					default:
						throw new TMError(currlang.READ_ERROR_UNEXPECTED_END_OF_RULE);
				}
			}
			//console.log(rules);
			stopBtn.disabled = false;
			setspeed();
			drawtape();
			tick();
		} catch (e) {
			input = '';
			rules = {};
			lastmove = '-';
			currclass = null;
			textareaSelectLine(codeTextarea, currline);
			setstatus((e instanceof TMError ? currlang.SYNTAX_ERROR_LABEL.replace('%d', currline + 1) + ' ' + e.message : currlang.UNKNOWN_ERROR_LABEL + ' ' + (e.message || e)));
			stop();
			codeTextarea.readOnly = inputBox.disabled = startBtn.disabled = false;
		}
	};
	var setspeed = function(){
		tickSpeed = speedToTimeoutMapping[speedSelect.selectedIndex];
		drawSpeed = (speedSelect.selectedIndex === 11 ? 130 : tickSpeed / 3);
	};
	var stop = function(){
		stopBtn.disabled = true;
		stopped = true;
	};
	var preventSelectTo = [stateDiv, speedLabel, statusDiv, tapeDiv, moveLeftBtn, moveRightBtn];
	var selectPreventerEvent = ('onselectstart' in document.body ? 'selectstart' : 'mousedown');
	var selectPreventerFunc = function(e){
		if (!e) {
			e = window.event;
		}
		if (e.preventDefault) {
			e.preventDefault();
		}
		return false;
	};
	for (var j = 0; j < preventSelectTo.length; j++) {
		addEvent(preventSelectTo[j], selectPreventerEvent, selectPreventerFunc);
	}
	preventSelectTo = selectPreventerEvent = selectPreventerFunc = null;
	addEvent(startBtn, 'click', start);
	addEvent(stopBtn, 'click', stop);
	addEvent(moveLeftBtn, 'click', function(){
		if (stopped && !startBtn.disabled) {
			tapepos++;
			currclass = null;
			drawtape();
		}
	});
	addEvent(moveRightBtn, 'click', function(){
		if (stopped && !startBtn.disabled) {
			tapepos--;
			currclass = null;
			drawtape();
		}
	});
	addEvent(speedSelect, 'change', function(e, v){
		setspeed();
	});
	codeTextarea.disabled = codeTextarea.readOnly = inputBox.disabled = speedSelect.disabled = startBtn.disabled = false;
})();
</script>
</body>
</html>

